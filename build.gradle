plugins {
    id 'io.wusa.semver-git-plugin'
}


description = 'Evolution of github.com:hypfvieh/bluez-dbus.git [gradle, java 11, windows compat]'

allprojects { Project prj ->
    prj.group = 'com.gpaglia.bluez'
    prj.version = '0.1.0-SNAPSHOT'  // default if no semver
    prj.getPlugins().withId('io.wusa.semver-git-plugin') {
        prj.semver {
            branches {
                branch {
                    regex = ".+"
                    incrementer = "NO_VERSION_INCREMENTER"
                    formatter = {
                        "${semver.info.version.major}.${semver.info.version.minor}.${semver.info.version.patch}+build.${semver.info.count}.sha.${semver.info.shortCommit}"
                    }
                }
            }
        }
        prj.version = semver.info.toString()
    }
}

subprojects { Project subp ->
    subp.getPlugins().withId('application') {
        subp.application.getMainClass().set(project.hasProperty("mainClass") ? getProperty("mainClass") : "NULL")
    }

    subp.getPlugins().withId('java') {
        // set java version and other standards for projects with java plugin installed
        subp.java {
            sourceCompatibility = JavaVersion.VERSION_11
            targetCompatibility = JavaVersion.VERSION_11
            withJavadocJar()
            withSourcesJar()
            // modularity not (yet) enabled
            // modularity.inferModulePath = true
        }

        subp.tasks.withType(JavaCompile) {
            options.encoding = 'UTF-8'
            options.compilerArgs += [
                    // jdk8 parameter names
                    '-parameters',
                    // '-proc:none',
                    '-Xlint:deprecation'
            ]
        }

        subp.tasks.withType(Test) {
            useJUnitPlatform {
                // options here
            }
            testLogging.showStandardStreams = true
            testLogging.exceptionFormat = 'full'
        }

        subp.tasks.withType(Javadoc) {
            options.encoding = 'UTF-8'
        }

        subp.afterEvaluate {Project p ->
            p.task(type: Jar, 'testJar') {
                group = 'build'
                archiveClassifier.set('tests')
                from p.sourceSets.test.output
            }
            if (! subp.getName().endsWith('-osgi')) {
                artifacts {
                    archives sourcesJar, javadocJar, testJar
                }
            }

            // publishing
            p.publishing {
                publications.create("publish-${p.name}", MavenPublication) {
                    // needed to have dependencies in the pom
                    if (p.name.endsWith("-platform")) {
                        from components.javaPlatform
                    } else {
                        from components.java
                        // to be understood how to get testJar artifact published with dependencies
                        versionMapping {
                            usage('java-api') {
                                fromResolutionOf('runtimeClasspath')
                            }
                            usage('java-runtime') {
                                fromResolutionResult()
                            }
                        }

                    }
                }

                repositories {
                    mavenLocal()
                }
            }
        }

    }

    // configure repositories
    subp.repositories {
        mavenLocal()
        jcenter()
    }

}

